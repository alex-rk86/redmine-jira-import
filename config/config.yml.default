# Redmine URL
REDMINE_URL: 'http://localhost'

# Redmine REST API key
REDMINE_KEY: '(your key)'

# Jira exported xml
JIRA_XML_FILE: '/home/alex/JiraMigration/entities.xml'

# Jira attachment directory
JIRA_ATTACHMENTS_DIR: '/home/alex/JiraMigration/attachments'

# Result MySQL file to run post import
SQL_OUTPUT_FILE: '/home/alex/JiraMigration/migrate.sql'

# Result attachment directory
ATTACHMENTS_OUTPUT_DIR: '/home/alex/JiraMigration/jira'

# Sqlite database file (required for cross-project references)
SQLITE_FILE: '/home/alex/JiraMigration/storage.db'

# Running modes:
# 0 - basic validation of statuses, types, priorities mapping
# 1 - #0 + create non-existing users only
# 2 - #0 + set all users as not locked (required for issue assigning during project import)
# 3 - #0 + set all users locked status based on Jira active/non-active (after projects imported)
# 4 - #0 + #1 + project(s) import
# 5 - cleanup storage for project(s) PROJECT_TO_IMPORT, usefull when deleting it in Redmine in order to re-run
# 6 - cross project relations processing
RUNNING_MODE: 0

# Project code to be  imported, use commas for multiple ones
PROJECT_TO_IMPORT: 'project1,project2'

# Empty to disable creating internal subproject and moving internal issues there
INTERNAL_PROJECT_POSTFIX: ''

# Redmine anonymous user
ANONYMOUS_USER_ID: 4

# Disable sending emails by adding .local to email domains when user created
POSTFIX_USER_MAIL_DOMAIN: '.local'

# Custom fields to be imported, Jira custom field name : Redmine custom field name
# special fields: %issue key% - Jira issue key, %label% - Jira label(s)
CUSTOM_FIELDS: {
    '%issue key%': 'Source Reference',
    '%label%':  'Labels',
    'Scope Reference': 'Scope Reference',
    'Scope Change Number': 'Scope Change Number',
    'Original Project': 'Original Project',
    'Severity': 'Severity',
    'Release Notes': 'Release Notes',
    'Configuration Changes': 'Configuration Changes',
    'Test Guidance': 'Test Guidance',
    'First Response': 'First Response'
}

# Additional transformation for custom fields when additional logic needs to be applied
# Options:
# 1. '(MappedRedmineField1)': %project_id->project_key% to convert value in Jira custom field
#    stored as number (project id) to project key in Redmine custom field.
# 2. '(MappedRedmineField2)': {(JiraValue1): MappedValue1, (JiraValue2): MappedValue2}
CUSTOM_FIELD_TRANSFORMATIONS: {
    'Original Project': '%project_id->project_key%',
    'Severity': {'10596': 'Critical', '10597': 'Major', '10598': 'Minor', '10599': 'Trivial'}
}

# Default role name for users
DEFAULT_USER_ROLE: 'developer'

# Status mapping between Jira and Redmine
STATUS_ALIASES: {
    'open': 'new',
    'to do': 'new',
    'done': 'resolved',
    'review': 'in review',
    'rework': 'in progress',
    'reopened': 'in progress',
    'work queue': 'in progress',
    'in client testing': 'in review',
    'billing': 'billing',
    'documenting': 'in review',
    'cancelled': 'cancelled',
    'deferred': 'deferred',
    'needs estimate': 'in review',
    'feedback': 'in review',
    'to be assigned': 'new',
    'in review': 'in review',
    'assigned': 'in progress',
    'in verification': 'in review',
    'waiting for approval': 'in review',
    're-opened': 'in progress',
    'backlog': 'in progress',
    'selected for development': 'in progress',
    'qa queue': 'in review',
    'ready for release': 'resolved',
    'internal testing': 'in review',
    'rework from qa': 'in progress',
    'retesting': 'in review',
    'rework from client': 'in progress',
    'returned from client': 'in review',
    'retesting from client': 'in review',
    'rework ready': 'in review',
    'review queue': 'in review',
    'in testing': 'in review'
}

# Tracker mapping between Jira and Redmine
TRACKER_ALIASES: {
    'epic': 'feature',
    'story': 'feature',
    'task': 'task',
    'sub-task': 'task',
    'defect': 'bug',
    'improvement': 'feature',
    'new feature': 'feature',
    'management': 'task',
    'project task': 'task',
    'scope change': 'change request',
    'sub-scope change': 'change request',
    'incident': 'depreciated',
    'tbc': 'depreciated',
    'test case': 'depreciated',
    'prospecting': 'depreciated',
    'account management': 'depreciated',
    'marketing admin': 'depreciated',
    'presentation': 'depreciated',
    'travel': 'depreciated',
    'proposal prep': 'depreciated',
    'requirements gathering': 'depreciated',
    'communications': 'depreciated',
    'vacation': 'depreciated',
    'sick days': 'depreciated',
    'time off': 'depreciated',
    'nonconformity': 'depreciated',
    'partial conformity': 'depreciated',
    'area of concern': 'depreciated',
    'good practice': 'depreciated',
    'opportunity for improvement': 'depreciated',
    'audit sub-task': 'depreciated',
    'usability': 'depreciated',
    'recommendation': 'feature',
    'project': 'depreciated'
}

# Priority mapping between Jira and Redmine
PRIORITY_ALIASES: {
    'lowest': 'low',
    'highest': 'urgent',
    'medium': 'normal'
}
